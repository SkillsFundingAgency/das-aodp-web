@using SFA.DAS.AODP.Models.Forms
@using SFA.DAS.AODP.Models.Settings
@using SFA.DAS.AODP.Web.Helpers.ApplicationPageViewHelpers
@using SFA.DAS.AODP.Web.Models.Application
@using SFA.DAS.AODP.Web.Models.GdsComponents
@inject FormBuilderSettings FormBuilderSettings
@model ApplicationPageViewModel.Question



@{

    var errored = ViewContext.ModelState.Any(
        k => k.Value.ValidationState == Microsoft.AspNetCore.Mvc.ModelBinding.ModelValidationState.Invalid
        && (k.Key == Model.Id.ToString() || ApplicationPageErrorHelper.ExtractOrderFromErrorKey(k.Key) == Model.Order - 1));
    var formGroupErrorClass = errored ? "govuk-form-group--error" : "";
    var inputErrorClass = errored ? "govuk-input--error" : "";

    var maxFileSizeMb = FormBuilderSettings.MaxUploadFileSize;
    var allowedFileTypes = FormBuilderSettings.UploadFileTypesAllowed;
}


<input type="hidden" name="Questions[@(Model.Order - 1)][Id]" value="@Model.Id" />
<input type="hidden" name="Questions[@(Model.Order - 1)][Type]" value="@Model.Type.ToString()" />

<div class="govuk-form-group @formGroupErrorClass">

    <h1 class="govuk-label-wrapper">
        <label class="govuk-label govuk-label--m" for="question-@Model.Id">
            @(Model.Order). @Model.Title @(Model.Required ? "" : "(optional)")
        </label>
    </h1>

    <div id="question-@Model.Id-hint" class="govuk-hint">
        @Model.Hint
    </div>

    @if (ViewContext.ModelState.ContainsKey(Model.Id.ToString()))
    {
        <p id="question-@Model.Id-error" class="govuk-error-message">
            <span class="govuk-visually-hidden">Error:</span> @ViewContext.ModelState[Model.Id.ToString()]!.Errors.First().ErrorMessage.ToString()
        </p>
    }

    @{
        string hintHtmlId = $"question-{Model.Id}-hint";
        string errorHtmlId = $"question-{Model.Id}-error";

        string questionHtmlId = $"question-{Model.Id}";
        string ariaDescribedBy = $"{hintHtmlId} {errorHtmlId}";
    }

    @if (Model.Type == QuestionType.Text)
    {
        <input class="govuk-input @inputErrorClass"
               id="@questionHtmlId"
               name="Questions[@(Model.Order - 1)][Answer][TextValue]"
               value="@Model.Answer?.TextValue"
               type="text"
               aria-describedby="@ariaDescribedBy">
    }
    else if (Model.Type == QuestionType.Number)
    {
        <input class="govuk-input govuk-input--width-20 @inputErrorClass"
               id="@questionHtmlId"
               name="Questions[@(Model.Order - 1)][Answer][NumberValue]"
               value=@Model.Answer?.NumberValue?.ToString()?.Replace(".00","")
               type="number"
               inputmode="numeric"
               aria-describedby="@ariaDescribedBy">
    }


    else if (Model.Type == QuestionType.TextArea)
    {
        <textarea class="govuk-textarea @inputErrorClass"
                  id="@questionHtmlId"
                  name="Questions[@(Model.Order - 1)][Answer][TextValue]"
                  type="text"
                  aria-describedby="@ariaDescribedBy">@Model.Answer?.TextValue</textarea>
    }

    else if (Model.Type == QuestionType.Radio)
    {
        <div class="govuk-radios" data-module="govuk-radios" id="@questionHtmlId">

            @foreach (var option in Model.Options ?? [])
            {
                <div class="govuk-radios__item">
                    <input @(Model.Answer?.RadioChoiceValue == option.Id.ToString() ? "checked" : "") class="govuk-radios__input" id="@questionHtmlId-@option.Id" name="Questions[@(Model.Order - 1)][Answer][RadioChoiceValue]" type="radio" value="@option.Id">
                    <label class="govuk-label govuk-radios__label" for="@questionHtmlId-@option.Id">
                        @option.Value
                    </label>
                </div>
            }
        </div>
    }
    else if (Model.Type == QuestionType.MultiChoice)
    {
        <div class="govuk-checkboxes" data-module="govuk-checkboxes" id="@questionHtmlId">

            @foreach (var option in Model.Options ?? [])
            {
                <div class="govuk-checkboxes__item">
                    <input @(Model.Answer?.MultipleChoiceValues?.Contains(option.Id.ToString()) == true ? "checked" : "")
                           class="govuk-checkboxes__input"
                           id="@questionHtmlId-@option.Id"
                           name="Questions[@(Model.Order - 1)][Answer][MultipleChoiceValues]"
                           type="checkbox"
                           value="@option.Id">

                    <label class="govuk-label govuk-checkboxes__label" for="@questionHtmlId-@option.Id">
                        @option.Value
                    </label>
                </div>
            }
        </div>
    }
    else if (Model.Type == QuestionType.Date)
    {

        var dateInputModel = new GdsDateInputViewModel()
                {
                    Id = questionHtmlId,
                    Name = $"Questions[{(Model.Order - 1)}][Answer][DateValue]",
                    Value = Model.Answer?.DateValue
                };
        await Html.RenderPartialAsync("GdsComponents/_GdsDateInput", dateInputModel);
    }

    else if (Model.Type == QuestionType.File)
    {
        @if (!ViewBag.IsSubmitted)
        {
            <govuk-details>
                <govuk-details-summary>
                    File restrictions
                </govuk-details-summary>
                <govuk-details-text>
                    Files must not be more than @maxFileSizeMb mb each and must be one of the following types: @string.Join(", ", allowedFileTypes).
                </govuk-details-text>
            </govuk-details>
            
            <input class="govuk-file-upload govuk-body govuk-!-static-padding-2"
                   name="Questions[@(Model.Order - 1)].Answer.FormFiles"
                   id="@questionHtmlId"
                   type="file"
                   multiple>
        }

        @if (Model.UploadedFiles.Any())
        {
            @if (!ViewBag.IsSubmitted)
            {
                <p class="govuk-body govuk-!-static-padding-2"><strong>Note that clicking 'Remove file' will immediately remove the file from the system.</strong></p>
            }
            <ul class="govuk-list govuk-list--bullet">
                @foreach (var file in Model.UploadedFiles)
                {
                    <li>
                        @file.DisplayName

                        @if (!ViewBag.IsSubmitted)
                        {
                            <button type="submit"
                                    class="govuk-button govuk-button--warning"
                                    data-module="govuk-button"
                                    data-prevent-double-click="true"
                                    value="@file.FullPath"
                                    name="RemoveFile">
                                Remove file <span class="govuk-visually-hidden">@file.DisplayName</span>
                            </button>
                        }
                    </li>
                }
            </ul>
        }

    }
    @if (!string.IsNullOrEmpty(Model.HelperHTML))
    {
        string helperClass = Model.Type == QuestionType.TextArea ? "" : "helper-details";
        <details class="govuk-details @helperClass">
            <summary class="govuk-details__summary">
                <span class="govuk-details__summary-text">
                    Help
                </span>
            </summary>
            <div class="govuk-details__text">
                @Html.Raw(Model.HelperHTML)
            </div>
        </details>
    }
</div>
